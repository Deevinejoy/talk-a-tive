rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(chatId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    function isGroupOwner(chatId) {
      return request.auth.uid == get(/databases/$(database)/documents/chats/$(chatId)).data.ownerId;
    }

    function isGroupChat(chatId) {
      return get(/databases/$(database)/documents/chats/$(chatId)).data.isGroup == true;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }

    // Chats
    match /chats/{chatId} {
      allow read: if isSignedIn() && (
        request.auth.uid in resource.data.participants
      );
      allow create: if isSignedIn() && (
        request.auth.uid in request.resource.data.participants
      );
      allow update: if isSignedIn() && (
        request.auth.uid in resource.data.participants ||
        (isGroupChat(chatId) && isGroupOwner(chatId))
      );
      allow delete: if isSignedIn() && (
        request.auth.uid in resource.data.participants ||
        (isGroupChat(chatId) && isGroupOwner(chatId))
      );

      // Messages in chats
      match /messages/{messageId} {
        allow read: if isSignedIn() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
        );
        allow create: if isSignedIn() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
        );
        allow update, delete: if isSignedIn() && (
          request.auth.uid == resource.data.senderId
        );
      }
    }
  }
} 